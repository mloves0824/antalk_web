// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetReq) Reset()         { *m = SetReq{} }
func (m *SetReq) String() string { return proto.CompactTextString(m) }
func (*SetReq) ProtoMessage()    {}
func (*SetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *SetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReq.Unmarshal(m, b)
}
func (m *SetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReq.Marshal(b, m, deterministic)
}
func (m *SetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReq.Merge(m, src)
}
func (m *SetReq) XXX_Size() int {
	return xxx_messageInfo_SetReq.Size(m)
}
func (m *SetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetReq proto.InternalMessageInfo

func (m *SetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetReply) Reset()         { *m = SetReply{} }
func (m *SetReply) String() string { return proto.CompactTextString(m) }
func (*SetReply) ProtoMessage()    {}
func (*SetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *SetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReply.Unmarshal(m, b)
}
func (m *SetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReply.Marshal(b, m, deterministic)
}
func (m *SetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReply.Merge(m, src)
}
func (m *SetReply) XXX_Size() int {
	return xxx_messageInfo_SetReply.Size(m)
}
func (m *SetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetReply proto.InternalMessageInfo

func (m *SetReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*SetReq)(nil), "proto.SetReq")
	proto.RegisterType((*SetReply)(nil), "proto.SetReply")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8d, 0x41, 0x8b, 0xc2, 0x30,
	0x10, 0x46, 0xb7, 0xbb, 0xb4, 0xbb, 0x3b, 0xcb, 0x52, 0x09, 0x22, 0x45, 0x2f, 0x92, 0x93, 0x20,
	0x84, 0xa2, 0x37, 0x8f, 0xbd, 0x78, 0x2d, 0xa9, 0x7f, 0x20, 0xea, 0x50, 0x8a, 0x91, 0xc4, 0x66,
	0x22, 0xf6, 0xdf, 0x4b, 0x52, 0x0f, 0x9e, 0xf2, 0x5e, 0xe0, 0xcd, 0x07, 0x40, 0xe8, 0x48, 0xd8,
	0xde, 0x90, 0x61, 0x69, 0x7c, 0x78, 0x09, 0x59, 0x83, 0x24, 0xf1, 0xc6, 0x26, 0xf0, 0x75, 0xc1,
	0xa1, 0x48, 0x96, 0xc9, 0xea, 0x57, 0x06, 0x64, 0x53, 0x48, 0xef, 0x4a, 0x7b, 0x2c, 0x3e, 0xe3,
	0xdf, 0x28, 0x9c, 0xc3, 0x4f, 0x2c, 0xac, 0x1e, 0xd8, 0x0c, 0x32, 0x47, 0x8a, 0xbc, 0x8b, 0x59,
	0x2a, 0x5f, 0xb6, 0xd9, 0xc1, 0xdf, 0x01, 0x1d, 0xd5, 0xd8, 0x2a, 0xe7, 0x1d, 0x5b, 0xc3, 0x77,
	0xd0, 0x06, 0x89, 0xfd, 0x8f, 0xf3, 0x62, 0x1c, 0x9d, 0xe7, 0xef, 0x6a, 0xf5, 0xc0, 0x3f, 0xaa,
	0x12, 0x16, 0x9d, 0x11, 0x6d, 0x6f, 0x4f, 0x02, 0x1f, 0xea, 0x6a, 0x35, 0x3a, 0xd1, 0x1b, 0x4f,
	0xd8, 0xfa, 0xee, 0x8c, 0x55, 0x2e, 0x03, 0xef, 0x03, 0xd7, 0x21, 0xad, 0x93, 0x63, 0x16, 0x6f,
	0x6c, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xcb, 0x16, 0xe4, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestPegasusClient is the client API for TestPegasus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestPegasusClient interface {
	TestSet(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetReply, error)
}

type testPegasusClient struct {
	cc *grpc.ClientConn
}

func NewTestPegasusClient(cc *grpc.ClientConn) TestPegasusClient {
	return &testPegasusClient{cc}
}

func (c *testPegasusClient) TestSet(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := c.cc.Invoke(ctx, "/proto.TestPegasus/TestSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPegasusServer is the server API for TestPegasus service.
type TestPegasusServer interface {
	TestSet(context.Context, *SetReq) (*SetReply, error)
}

func RegisterTestPegasusServer(s *grpc.Server, srv TestPegasusServer) {
	s.RegisterService(&_TestPegasus_serviceDesc, srv)
}

func _TestPegasus_TestSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPegasusServer).TestSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestPegasus/TestSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPegasusServer).TestSet(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestPegasus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestPegasus",
	HandlerType: (*TestPegasusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestSet",
			Handler:    _TestPegasus_TestSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
